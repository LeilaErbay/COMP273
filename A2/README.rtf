{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 ReadMe.txt\
\
Name: Leila Erbay\
ID: 260672158\
\
Q1.\
Process:\
	- increment one number  (t0) by multiples of 10\
	- after each increment of 10, divide the number by 15\
	- check if the remainder is 0 \
\
	at the same time,\
	- increment one number  (t1) by multiples of 15\
	- after each increment of 10, divide the number by 10\
	- check if the remainder is 0 \
\
	- once the remainder for both t0 and t1 are equal to 0 (i.e. when t3 = t5)\
	then we have found our lcm\
\
\
Q2.\
Process:\
	- after taking user input, create two pointers pointing to the first char of the userInput string\
	- increment one pointer by 1 so that you have a 1 pointer starting at the 2nd char (t1) and one \
	pointer starting at the 1st char (t0)\
\
	- I make a special check for the first char\
		- this checks to see if the first char is a special character, and if it is increment (i.e. skip)\
	- the second part of the check for the first char\
		- checks to see if the first char is lower case, if so capitalize and move onto next char\
	- loop:\
		- checks if the 2nd pointer has hit the NULL or NewLine \
		- if not, then load 1 char into t2 and the next sequential char into t3\
		- checks if t2 is a space, if so checks if next char is a lower case. In this case, we \
		capitalize\
		- if t2 is not equal to a space just increment (i.e. skip if special character)\
\
	- capitalize:\
		- just changes ascii value of lower case to upper and saves that\
\
	- increment\
		- move both pointers one ahead\
\
Q3.\
Process:\
	- take input from user and eventually store it into a reg to use as arguments to gcd\
	\
	- gcd:\
		- create space on stack to store ra\
		- base case: if int1 = int 2 we are \'93done\'94 so we pop stack and save the final value in v0\
		and return out of gcd\
\
		- if int 1 > int 2: decrement int1 by int2 and call gcd\
		-restore stack when we are popping out of return calls\
\
		- if int 1 < int2: decrement int2 by int1 and call gcd\
		- restore stack when we are popping out of return calls}