{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 COMP 273 A4\
\
Q1. \
 \'97 no special comments\
\
Q2. \
\'97 I only have this program implemented for 24 * 7 images with values up to 2 digits since I did not know how the spacing and everything would differ when 3 digits were added.\
\
Q3.\
\'97 I used the stack to implement my program. The basic idea is that num1, op, num2 are all placed on the stack on after the other. After all the checks and math have been done, the final answer lies in the place where num1 was originally located so that the operation following goes in the correct spot accordingly. \
\
\'97 I throw errors when enter is pressed at an incorrect time such as 1 + (enter)\
\'97 I throw errors when there are too many operators such as 1 + * 9 (enter)\
\'97 I throw errors for division by zero\
\
\'97 For the math portion, If the calculator receives 1 / 2 (enter) it returns 0.5, the value is then rounded up so that the next operation emulates integer arithmetic. So if the the next expression is * 10, the value should be 10. }